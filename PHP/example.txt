<?
if(!defined('B_PROLOG_INCLUDED') || B_PROLOG_INCLUDED !== true) die();
use Bitrix\Main\Config\Option;
use Bitrix\Main\LoaderException;
use Bitrix\Main\SystemException;
use Bitrix\Main\ArgumentException;
use Bitrix\Main\Web\Json;
use LLL\Admin\Catalog\CardImportFromPrice\Form\CardImportFromPriceForm;
use LLL\ArticleCross\ArticleCrossService;
use LLL\Auto\AutoService;
use LLL\Catalog\Modern\CatalogRepository;
use LLL\Admin\Catalog\CardProduct\Form\FormBuilder;
use LLL\Catalog\Modern\Product\CardProductRepository;
use LLL\Admin\Catalog\CardImportFromRow\Form\RowsForm;
use LLL\AutoCross\AutoCrossService;
use LLL\Catalog\Modern\Product\Exception\ProductAlreadyExist;
use LLL\Helper\AutoPartHelper;
use LLL\ArticleCross\ArticleBrand;
use LLL\Admin\Catalog\CardImportFromPrice\CardImportFromPrice;

class LLLImportCardFromPrice extends CBitrixComponent
{
    /** @var string */
    private $template = '';

    /** @var CatalogRepository */
    private $catalogRepository;

    /** @var CardProductRepository */
    private $cardProductRepository;

    /** @var RowsForm */
    private $form;

    /** @var AutoCrossService */
    private $autoCrossService;

    /** @var ArticleCrossService */
    private $articleCrossService;

    /** @var AutoService */
    private $autoService;

    /** @var CardImportFromPrice */
    private $cardImportFromPrice;

    public function __construct($component = null)
    {
        parent::__construct($component);
        $this->autoCrossService = new AutoCrossService();
        $this->cardProductRepository = new CardProductRepository();
        $this->catalogRepository = new CatalogRepository();
        $this->form = $this->arResult['form'] = new CardImportFromPriceForm(1);
        $this->articleCrossService = new ArticleCrossService();
        $this->autoService = new AutoService();
        $this->cardImportFromPrice = new CardImportFromPrice();
    }

    /**
     * @param $params
     * @return array
     * @throws ArgumentException
     */
    public function onPrepareComponentParams($params)
    {
        return [
            'is_ajax' => clearVar($params['is_ajax']),
            'module' => clearVar($params['module']),
        ];
    }

    protected function getResult()
    {
        global $APPLICATION;
        $APPLICATION->SetTitle('Импорт карточек товаров из прайсов');

        $this->form->load();
        $this->arResult['result'] = [];

        if ($this->request->isPost()) {
            if ($this->form->getErrors()) {
                $this->arResult['errors'] = $this->form->getErrors();
                return;
            }

            $result = $this->form->getResult();
            $parserResult = $this->cardImportFromPrice->parse(
                $result['price_type'],
                explode(PHP_EOL, $result['rows'])
            );
            $this->arResult['articlesall'] = $this->cardImportFromPrice->parseOnlyArticles(
                $result['price_type'],
                explode(PHP_EOL, $result['rows'])
            );

            $this->arResult['result'] = $parserResult;
        }
        //pre($this->arResult['result']);
    }

    public function getAjaxResult(): string
    {
        $action = $this->request->get('action');
        //pre($this->arResult['articles_from_row']);
        switch ($action) {
            case 'save_card_product':
                $catalogId = (int)$this->request->get('catalog_id');
                $form = $this->getForm($catalogId);
                $form->load();

                if ($form->getErrors()) {
                    return Json::encode(['errors' => implode('<br>', $form->getErrors())]);
                }

                try {
                    $productDto = $form->getResultDto();

                    $id = $this->cardProductRepository->save($productDto);
                    return Json::encode(['card_product' => array_merge($productDto->toArray(), ['id' => $id])]);
                } catch (ProductAlreadyExist $e) {
                    $error = $e->getMessage();
                } catch(Exception $e) {
                    $error = 'Ошибка: ' . $e->getMessage();
                }

                return Json::encode(['errors' => $error]);
                break;
            case 'show_card_product_form':
                $catalogId = $this->arResult['catalog_id'] = (int)$this->request->get('catalog_id');
                $this->arResult['articles'] = $this->request->get('articles');
                try {
                    $form = $this->getForm($catalogId);
                    $this->arResult['ajax_uri'] .= '&catalog_id=' . $catalogId;
                } catch (Exception $e) {
                    $this->arResult['errors'][] = 'Каталог не найден';
                    $this->includeComponentTemplate('error');
                    die;
                }

                $cardProductForm = $this->arResult['card_product_form'] = $form;
                $cardProductForm->load();

                $this->includeComponentTemplate('card_product_form');
                break;
            case 'import_all':
                $catalogId = $this->arResult['catalog_id'] = (int)$this->request->get('catalog_id');
                $this->arResult['articles'] = $this->request->get('articles');
                try {
                    $form = $this->getForm($catalogId);
                    $this->arResult['ajax_uri'] .= '&catalog_id=' . $catalogId;
                } catch (Exception $e) {
                    $this->arResult['errors'][] = 'Каталог не найден';
                    $this->includeComponentTemplate('error');
                    die;
                }

                $cardProductForm = $this->arResult['all_import_form'] = $form;
                $cardProductForm->load();

                $this->includeComponentTemplate('all_import_form');
                break;
            case 'get_models':
                $catalogId = (int)$this->request->get('catalog_id');
                $markId = (int)$this->request->get('mark_id');

                try {
                    return Json::encode(['models' => $this->getForm($catalogId)->getModelSelectOptions($markId)]);
                } catch (Exception $e) {
                    return Json::encode(['error' => $e->getMessage()]);
                }
                break;

            case 'get_chassis_engines':
                $catalogId = (int)$this->request->get('catalog_id');
                $markId = (int)$this->request->get('mark_id');
                $modelId = (int)$this->request->get('model_id');

                try {
                    $form = $this->getForm($catalogId);
                    return Json::encode([
                        'chassis' => $form->getChassisSelectOptions($markId, $modelId),
                        'engines' => $form->getEngineSelectOptions($markId, $modelId)
                    ]);
                } catch (Exception $e) {
                    return Json::encode(['error' => $e->getMessage()]);
                }

                break;
            case 'show_cross_form':
                $this->arResult['articles_from_row'] = $this->request->get('articles_from_row');
                $this->arResult['simple_crosses'] = $this->findSimpleCrosses($this->arResult['articles_from_row']);
                $this->arResult['crosses'] = $this->findCrosses($this->arResult['articles_from_row']);
                $this->arResult['original_brand_select_options'] = $this->getOriginalBrandSelectOptions();

                if (empty($this->arResult['articles_from_row'])) {
                    $this->arResult['errors'][] = 'Артикулы из позиции не найдены';
                }

                $this->includeComponentTemplate('add_cross');
                break;
            case 'add_cross':
                $articleOriginal = clearVar($this->request->get('article_original'));
                $brandOriginal = clearVar($this->request->get('brand_original'));
                $articleAnalog = clearVar($this->request->get('article_analog'));
                $brandAnalog = clearVar($this->request->get('brand_analog'));

                if (empty($articleOriginal) || empty($brandOriginal) || empty($articleAnalog) || empty($brandAnalog)) {
                    echo json_encode(['errors' => 'Не заполнены все поля']);
                    break;
                }

                $articleBrandOriginal = new ArticleBrand($articleOriginal, $brandOriginal);
                $articleBrandAnalog = new ArticleBrand($articleAnalog, $brandAnalog);

                try {
                    $this->articleCrossService->add($articleBrandOriginal, $articleBrandAnalog, 'import');
                } catch (Exception $e) {
                    echo json_encode(['errors' => $e->getMessage()]);
                    break;
                }

                echo json_encode(['result' => true]);
                break;
            case 'add_cross_multi':
                $articleOriginal = clearVar($this->request->get('article_original'));
                $brandOriginal = clearVar($this->request->get('brand_original'));
                $articleBrandsAnalog = $this->request->get('article_brands_analog');

                if (empty($articleOriginal) || empty($brandOriginal) || empty($articleBrandsAnalog)) {
                    echo json_encode(['errors' => 'Не заполнены все поля']);
                    break;
                }

                $articleBrands = explode(PHP_EOL, $articleBrandsAnalog);
                $articleBrandOriginal = new ArticleBrand($articleOriginal, $brandOriginal);

                foreach ($articleBrands as $articleBrand) {
                    list($article, $brand) = explode(';', $articleBrand);
                    $articleBrandAnalog = new ArticleBrand($article, $brand);

                    try {
                        $this->articleCrossService->add($articleBrandOriginal, $articleBrandAnalog, 'import');
                    } catch (Exception $e) {
                        echo json_encode(['errors' => $e->getMessage()]);
                        break;
                    }
                }

                echo json_encode(['result' => true]);
                break;
        }

        return '';
    }

    /**
     * @return array|mixed
     * @throws LoaderException
     * @throws SystemException
     */
   public function executeComponent()
   {
        $this->arResult['module_uri'] = 'jpmotor.php?m=' . $this->arParams['module'];
        $this->arResult['ajax_uri'] = 'https://' . Option::get('main', 'server_name') . '/bitrix/admin/' . $this->arResult['module_uri'];
        $this->arResult['catalogs'] = $this->getCatalogs();

       if ($this->arParams['is_ajax']) {
           $result = $this->getAjaxResult();
           echo $result;

           return $result;
        }
        //pre($this->arParams['is_ajax']);
        $this->getResult();

       $this->includeComponentTemplate($this->template);

       return $this->arResult;
   }

   private function getCatalogs(): array
    {
        $catalogs = [];

        foreach ($this->catalogRepository->all() as $catalog) {
            if ($catalog->isTypePart()) {
                $catalogs[] = $catalog;
            }
        }
        return $catalogs;
    }

    private function getForm(int $catalogId)
    {
        $catalog = $this->catalogRepository->getById($catalogId);
        return (new FormBuilder($catalog))->getForm();
    }

    private function findSimpleCrosses(array $articles): array
    {
        $simpleCrosses = [];

        foreach ($articles as $article) {
            $article = AutoPartHelper::clearArticle($article);

            if (empty($article)) {
                continue;
            }

            $crosses = $this->autoCrossService->find($article);

            $simpleCrosses[] = [
                'article' => $article,
                'crosses' => $crosses,
            ];
        }

        return $simpleCrosses;
    }

    private function findCrosses(array $articles): array
    {
        $crosses = [];

        foreach ($articles as $article) {
            $article = AutoPartHelper::clearArticle($article);

            if (empty($article)) {
                continue;
            }

            $collection = $this->articleCrossService->find($article);

            $item = [
                'article' => $article,
                'crosses' => [],
            ];

            if (!$collection->isEmpty()) {
                $item['crosses'] = $collection->all();
            }

            $crosses[] = $item;
        }

        return $crosses;
    }

    private function getOriginalBrandSelectOptions(): array
    {
        $options = [];

        foreach ($this->autoService->getMarks() as $mark) {
            $options[$mark->getId()] = $mark->getName();
        }
        return $options;
    }
}